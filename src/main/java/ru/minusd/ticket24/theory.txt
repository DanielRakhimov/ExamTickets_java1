Билет №24
-----ЗАДАНИЕ 1------
Расширение классов.
Переопределение методов.
Сокрытие полей данных.
--------------------
Расширение классов

С помощью наследования можно расширить функционал уже имеющихся классов за счет добавления нового функционала или
изменения старого. Чтобы объявить один класс наследником от другого, надо использовать после имени класса-наследника
ключевое слово extends, после которого идет имя базового класса.

С ключевым словом implements связано чуть больше хитростей. Слово «имплементировать» можно понимать, как
«реализовывать», а в тот самый момент, когда возникает слово «реализовывать», где-то недалеко появляются
интерфейсы. Так вот конструкция public class Door implements Openable означает, что класс дверь реализует
интерфейс «открывающийся». Следовательно класс должен переопределить все методы интерфейса. Главная фишка
в том, что можно реализовывать сколь угодно много интерфейсов.


Переоределение методов

Переопределение метода (англ. Method overriding) в объектно-ориентированном программировании — одна из возможностей языка программирования, позволяющая подклассу или дочернему классу обеспечивать специфическую реализацию метода, уже реализованного в одном из суперклассов или родительских классов.

У переопределения есть ряд ограничений:

У переопределенного метода должны быть те же аргументы, что и у метода родителя.
У переопределенного метода должен быть тот же тип возвращаемого значения, что и у метода родителя.
Модификатор доступа у переопределенного метода также не может отличаться от «оригинального»

Переопределение методов в Java — один из инструментов для реализации идеи полиморфизма

-----ЗАДАНИЕ 2------
Паттерны проектирования программ.
Паттерн Observer и модель MVC.
--------------------

паттерн (англ. design pattern) в разработке программного обеспечения — повторяемая архитектурная конструкция, представляющая собой решение проблемы проектирования в рамках некоторого часто возникающего контекста.

Назначение паттерна Observer - определять зависимость типа «один ко многим» между объектами таким образом, что при изменении состояния одного объекта все зависящие от него оповещаются об этом и автоматически обновляются. 

Есть 2 основных интерфейса (наблюдатель и наблюдаемое)

interface Observer {
    void update (String news);
}

interface Observable {
    void registerObserver(Observer o);
    void removeObserver(Observer o);
    void notifyObservers();
}

Есть церковь, которая будет вещать своей пастве о чем-либо

public class CatholicChurch implements Observable {
    private List<observer> parishioners;
    private String newsChurch;

    public CatholicChurch() {
        parishioners = new ArrayList<>();
    }

    public void setNewsChurch(String news) {
        this.newsChurch = news;
        notifyObservers();
    }

    @Override
    public void registerObserver(Observer o) {
        parishioners.add(o);
    }

    @Override
    public void removeObserver(Observer o) {
        parishioners.remove(o);
    }

    @Override
    public void notifyObservers() {
        for (Observer o : parishioners)
            o.update(newsChurch);
    }
}

Есть человек-прихожанин, который может войти в лоно церкви или выйти из него 
public class Parishioner implements Observer {
    private String name;

    public Parishioner(String name, Observable o) {
        this.name = name;
        o.registerObserver(this);
    }

    @Override
    public void update(String news) {
        System.out.println(name + " узнал новость: " + news);
    }
}

Как это будет работать:
public class Main {
    public static void main(String[] args) {
        var catholicChurch = new CatholicChurch();

        new Parishioner("Мартин Лютер", catholicChurch);
        new Parishioner("Жан Кальвин", catholicChurch);

        catholicChurch.setNewsChurch("Инквизиция была ошибкой... месса Mea Culpa 12 марта 2000 года");
    }
}





Паттерн MVC
Что такое MVC: основные идеи и принципы
VC — это набор архитектурных идей и принципов для построения сложных информационных систем с пользовательским интерфейсом;
MVC — это аббревиатура, которая расшифровывается так: Model-View-Controller.
Дисклеймер: MVC — это не паттерн проектирования. MVC — это именно набор архитектурных идей и принципов для построения сложных систем с пользовательским интерфейсом.

Model. Первая компонента/модуль — так называемая модель. Она содержит всю бизнес-логику приложения. 

View. Вторая часть системы — вид. Данный модуль отвечает за отображение данных пользователю. Все, что видит пользователь, генерируется видом.

Controller. Третьим звеном данной цепи является контроллер. В нем хранится код, который отвечает за обработку действий пользователя (любое действие пользователя в системе обрабатывается в контроллере). 

Модель — самая независимая часть системы. Настолько независимая, что она не должна ничего знать о модулях Вид и Контроллер. Модель настолько независима, что ее разработчики могут практически ничего не знать о Виде и Контроллере.

Основное предназначение Вида — предоставлять информацию из Модели в удобном для восприятия пользователя формате. Основное ограничение Вида — он никак не должен изменять модель. 

Основное предназначение Контроллера — обрабатывать действия пользователя. Именно через Контроллер пользователь вносит изменения в модель. Точнее в данные, которые хранятся в модели.

