Билет № 25

1) 
Интерфейс Java представляет собой набор абстрактных методов и констант (необязательно).
Ни один из методов. Интерфейс не имеет определения (тела). Методы в интерфейсе имеют модификатор public по умолчанию.

Пустой интерфейс - это интерфейс, который не содержит ни одного метода. Пустой интерфейс может быть использован для создания маркеров.
Роль пустого интерфейса, как правило, символическая, то есть те, которые реализуют этот интерфейс, указывают, что все они являются определенным типом класса.

Реализация:
interface Printable{	-   Создание интерфейса
	void print();
}

Class Book implements Printable{    -   Подключение интерфейса к классу, ключевое слово implements
	...
	...
	public void print(){
		...
	}
}

Сравнение с абстрактным классов:
 1) Интерфейс описывает только поведение. У него нет состояния. А у абстрактного класса состояние есть: он описывает и то, и другое
 2) Абстрактный класс связывает между собой и объединяет классы, имеющие очень близкую связь. В то же время, один и тот же интерфейс могут реализовать классы, у которых вообще нет ничего общего.
 3) Классы могут реализовывать сколько угодно интерфейсов, но наследоваться можно только от одного класса.
 

2) Пакет java.util.regex предоставляется Java с целью сопоставления регулярных выражений с шаблоном.
Пакет java.util.regex исходно состоит из следующих трех классов:
* Pattern Class – объект класса Pattern представляет скомпилированное представление регулярного выражения.
  В классе Pattern публичный конструктор не предусмотрен.
  Для создания шаблона, вам сперва необходимо вызвать один из представленных публичных статичных методов compile(), который далее произведет возврат объекта класса Pattern.
  Регулярное выражение в данных методах принимается как первый аргумент.
* Matcher Class 
* PatternSyntaxException
Пример:

public static void main(String[] args){
	String text = "Егор Алла Александр";
	Pattern pattern = Pattern.compile("А.+а");
	Matcher matcher = pattern.matcher(text);
	while(matcher.find()){
		System.out.println(text.substring(matcher.start(), matcher.end()));
	}
}




