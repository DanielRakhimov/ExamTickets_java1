Билет №7
-----ЗАДАНИЕ 1------
Переопределение методов в Java, абстрактные методы.
--------------------

Переопредление методов в Java, абстрактные методы.

Переопределение метода (англ. Method overriding) в объектно-ориентированном программировании — одна из возможностей языка программирования, позволяющая подклассу или дочернему классу обеспечивать специфическую реализацию метода с той же сигнатурой (имя, плюс номер и тип его параметров), уже реализованного в одном из суперклассов или родительских классов.

Перед переопределяемым методом указывается аннотация @Override. Данная аннотация в принципе не обязательна.
При переопределении метода он должен иметь уровень доступа не меньше, чем уровень доступа в базовом класса. Например, если в базовом классе метод имеет модификатор public, то и в производном классе метод должен иметь модификатор public.


Абстрактные методы -- это методы только с сигнатурой/без тела.
Методы интерфейса неявно абстрактны и требуют конкретной реализации класса, если не приведена дефолтная реализация.

Абстрактные методы в абстрактных классах должны быть явно объявлены как абстрактные и перепоределены в неабстрактном потомке.

-----ЗАДАНИЕ 2------
Иерархия классов ввода вывода.
Работа с файлами в Java.
Работа с файлами.
Сериализация объектов.
--------------------

Иерархия потоков ввода вывода.
Reader<-FilterReader<-PushBackReader
Reader<-StringReader
Reader<-PipedReader
Reader<-CharArrayReader
Reader<-InputStreamReader<-FileReader
Reader<-LineNumberReader
Reader<-BufferedReader
С Writer тоже самое, только замени слово Reader на writer


Работа с файлами Java:

Чтобы работать с файлами, есть шикарный утилитный класс — java.nio.file.Files. У него есть методы просто на все случаи жизни. Все методы этого класса статические и работают с объектами типа Path. Методов очень много, поэтому мы рассмотрим только основные:

Path createFile(Path path) Создает новый файл с путем path
Path createDirectory(Path path) Создает новую директорию
Path createDirectories(Path path) Создает несколько директорий
Path createTempFile(prefix, suffix) Создает временный файл
Path createTempDirectory(prefix) Создает временную директорию
void delete(Path path) Удаляет файл или директорию, если она пуста
Path copy(Path src, Path dest) Копирует файл
Path move(Path src, Path dest) Перемещает файл
boolean isDirectory(Path path) Проверяет, что путь — это директория, а не файл
boolean isRegularFile(Path path) Проверяет, что путь — это файл, а не директория
boolean exists(Path path)Проверяет, что объект по заданному пути существует
long size(Path path) Возвращает размер файла
byte[] readAllBytes(Path path) Возвращает все содержимое файла в виде массива байт
String readString(Path path) Возвращает все содержимое файла в виде строки
List<String> readAllLines(Path path) Возвращает все содержимое файла в виде списка строк
Path write(Path path, byte[]) Записывает в файл массив байт
Path writeString(Path path, String str) Записывает в файл строку
DirectoryStream<Path> newDirectoryStream(Path dir) Возвращает коллекцию файлов (и поддиректорий) из заданной директории


В отличие от большинства классов ввода/вывода, класс File работает не с потоками, а непосредственно с файлами. Данный класс позволяет получить информацию о файле: права доступа, время и дата создания, путь к каталогу. А также осуществлять навигацию по иерархиям подкаталогов.
Класс java.io.File может представлять имя определённого файла, а также имена группы файлов, находящихся в каталоге. Если класс представляет каталог, то его метод list() возвращает массив строк с именами всех файлов.


Сериализация
Сериализация (Serialization) — это процесс, который переводит объект в последовательность байтов или строку, по которой затем его можно полностью восстановить. Зачем это нужно? Дело в том, при обычном выполнении программы максимальный срок жизни любого объекта известен — от запуска программы до ее окончания. Сериализация позволяет расширить эти рамки и «дать жизнь» объекту также между запусками программы


