Билет №14
-----ЗАДАНИЕ 1------
Примитивные и ссылочные типы данных.
Использование механизмов автоупаковки и автораспаковки.
Операция приведения типов.
Понижающее и привышающее приведение.
--------------------

Примитивные и ссылочные типы данных. Использование механизмов автоупаковки и автораспаковки.
Операция приведения типов. Понижающее и привышающее приведение.

В Java существует 8 примитивных типов данных:
●	byte (целые числа, 1 байт) от -128 до 127
●	short (целые числа, 2 байта) от -32768 до 32767
●	int (целые числа, 4 байта) от -2147483648 до 2147483647
●	long (целые числа, 8 байтов) от -9223372036854775808 до 9223372036854775807
●	float (вещественные числа, 4 байта) от ~1,4*10-45 до ~3,4*1038
●	double (вещественные числа, 8 байтов) от ~4,9*10-324  до ~1,8*10308
●	char (символ Unicode, 2 байта) минимальное значение ‘\ u0000’ (или 0), и максимальное значение ‘\ uffff’ (или 65535 включительно).
●	boolean (значение истина/ложь, 1 бит (тут есть нюансы)) true или false
По документации Oracle размер boolean не является чем-то определённым

Также в языке Джава существуют ссылочные типы данных, это типы классов, интерфейсов и типы массивов, также существует специальный null тип.
Существует четыре вида ссылочных типов данных: классы, интерфейсы, ссылки на примитивные типы и массивы.
Примером классам могут быть строки - это объекты класса String.
Если требуется создать ссылку на примитивный тип данных,то необходимо использоваться класс-обертку.

byte - Byte
short - Short
int - Integer
long - Long
float - Float
double - Double
char - Character
boolean - Boolean

Ссылочные типы данных создаются самим программистом, за исключением String и Array.
Ссылочные переменные хранят адрес ячейки памяти, в которой расположен определенный объект.
Имена ссылочных типов данных начинаются с верхнего регистра.
Любой класс в Java - это ссылочный тип.
По умолчанию значение любой переменной ссылки - null.

Автоупаковка и автораспаковка

Автоупаковка - это автоматическая инкапсуляция примитивного типа в эквивалентную ему класс-обёртку всякий раз, когда
требуется объект данного типа. Соотвественно Автораспаковка - наоборот.

Autoboxing происходит:
1. При присвоении значения примитивного типа переменной соответствующего класса-обёртки.
2. При передаче примитивного типа в параметр метода, ожидающего соответствующий ему класс-обёртку.


Unboxing происходит:
1. При присвоении экземпляра класса-обёртки переменной соответствующего примитивного типа.
2. В выражениях, в которых один или оба аргумента являются экземплярами классов-обёрток (кроме операции == и !=).
3. При передаче объекта класса-обёртки в метод, ожидающий соответствующий примитивный тип.

Упаковка:
public class Main {
    public static void main(String[] args) {
       Integer iOb = 7;
       Double dOb = 7.0;
       Character cOb = 'a';
       Boolean bOb = true;

       method(7);
    }

    public static void method(Integer iOb) {
      System.out.println("Integer");
    }
}

Различаются два вида преобразований типов — upcasting и downcasting. Повышающее преобразование (upcasting) —
это преобразование от типа порожденного класса (от подкласса) к базовому (суперклассу). Такое преобразование
допустимо всегда. На него нет никаких ограничений и для его проведения не требуется применять никаких дополнительных
синтаксических конструкций (см. предыдущий пример). Это связано с тем, что объект подкласса всегда в себе содержит как
свою часть объект суперкласса.

Понижающее преобразование (downcasting) — это преобразование от суперкласса к подклассу. Такое преобразование
имеет ряд ограничений. Во-первых, оно может задаваться только явно при помощи операции преобразования типов, например,





-----ЗАДАНИЕ 2------
Возможности Java Framework Collections.
Интерфейс LinkedList и его основные методы.
--------------------

Возможности Java Framework Collections. Интерфейс LinkedList и его основные методы.

Java Collection — это фреймворк, который обеспечивает унифицированную архитектуру для хранения и управления группой объектов. По своей сути, это набор классов и интерфейсов, которые обеспечивают стандартный способ представления коллекций объектов и управления ими на языке Java. Также фреймворк помогает в реализации часто используемых структур данных, таких как List, Set и Map.

Java Collection Framework включает несколько интерфейсов и классов. Вот список некоторых из них:

Интерфейсы
Интерфейсы в Java Collection Framework определяют общее поведение и операции, которые могут выполняться с коллекциями. Сюда входят добавление или удаление элементов, повторение элементов в коллекции и многое другое.
Collection: корневой (root) интерфейс в иерархии коллекций, представляющий группу объектов, известных как элементы.
List: упорядоченная коллекция элементов, допускающая дублирование.
Set: коллекция элементов, не допускающих дублирования.
Map: коллекция пар ключ-значение (key-value), где каждый ключ уникален.
Queue: очередь — это структура данных, которая используется для хранения элементов в порядке появления (First-In-First-Out, FIFO).

Интерфейс LinkedList предоставляет методы для работы с двусвязным списком. Основные методы LinkedList включают в себя add(), remove(), get(), set(), contains(), size(), clear(), isEmpty(), addFirst(), addLast(), removeFirst(), removeLast(), peek(), poll(), offer(), element() и offerFirst(
